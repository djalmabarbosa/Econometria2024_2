---
title: "Econometria"
subtitle: "Organização dos Dados | Prof. Djalma Barbosa"
format: 
    revealjs:
      slide-number: true
      slide-level: 3
      logo: logoUfr.png
      incremental: true
      scrollable: true
      theme: simple
      code-fold: false
      self-contained: true
editor: visual
---

## 1. Avaliando a consistência dos dados

-   A avaliação da consistência dos dados é uma etapa rotineira na Ciência de Dados
-   O que verificamos?
    -   O número de linhas e colunas era o esparado?
    -   Os nomes das variáveis vieram como esperado?
    -   Quais são os tipos de variáveis que tenho no banco? Eles estão corretos?

### 

-   Fazendo a leitura dos dados

    ```{r, echo=TRUE}
    load("dados_empresas2.RData")
    ```

-   Dando uma olhada no banco de dados

    ```{r, echo=TRUE}
    library(tidyverse)
    glimpse(dados)
    ```

### Selecionando variáveis para análise {.smaller}

-   Utilizaremos a função *select ( )* do *tidyverse*

-   Esta função tem dois argumentos principais

    1.  os dados utilizados
    2.  o nome das colunas que devem ser selecionadas

    ```{r, echo=TRUE}
    dados_menor <- select(dados, nome_empresa, setor_atuacao, indice_sustentabilidade)
    ```

-   Vamos utilizar a função *head ( )* para visualizar as primeiras linhas da nova tabela

    -   

        ```{r, echo=TRUE}
        head(dados_menor)
        ```

### Simplificando o fluxo de análises {.smaller}

-   Muitas vezes reaproveitamos o resultado de uma análise (pedaço de código) para a análise seguinte

-   i.e, utilizamos o *output* de um código anterior como *argumento* principal para a próxima análise

-   Conseguimos este comportamento utilizando *pipes*:

    ```{r, echo=TRUE}
    dados_menor <- dados |>
      select(nome_empresa, setor_atuacao,indice_sustentabilidade,nivel_satisfacao_cliente,presenca_internacional_fct)
    ```

-   Unindo as duas partes de código:

    ```{r, echo=TRUE}
    dados_menor <- dados |>
      select(nome_empresa, setor_atuacao,indice_sustentabilidade,nivel_satisfacao_cliente,presenca_internacional_fct) |>
      head() |>
      print()
    ```

## 2. Preparando as variáveis para análise de dados

### Excluindo colunas

```{r, echo=TRUE}
dados_menor_2 <- dados_menor |> 
  select(-setor_atuacao) |>
  head() |>
  print(n = 7)
```

### Inserindo novas colunas

```{r, echo=TRUE}
dados_menor_2 <- dados_menor |>
  select(nome_empresa, indice_sustentabilidade) |>
  mutate(indice_sustentabilidade_log = log(indice_sustentabilidade)) |>
  head() |>
  print()
  
```

### Filtrando colunas

-   Já vimos como excluir, transformar e renomear colunas

-   Vamos aprender a filtrar observações de um banco de dados

-   Utilizaremos a função *filter( )*

### Operadores lógicos

![](operadores_logicos.png)

###  {.smaller}

-   Vamos praticar. Vamos filtrar, na base de dados original, as empresas que atuam no Centro-Oeste e que ofertam pelo menos 5 produtos

    -   

        ```{r, echo=TRUE}

        dados |> 
          filter(localizacao == "centro-oeste", numero_produtos >= 5)
        ```

### 

-   Na função filter( ), a vírgula representa o "e". Para "ou", utilizamos \| .

-   Tente criar um código para filtrar, além do centro-oeste, empresas que também atuam na região sul.

    Use somente este filtro.

### 

Também podemos utilizar o operador %in% neste caso.

```{r, echo = TRUE}

dados |> 
  filter(localizacao %in% c("centro-oeste","sul")) |>
  select(nome_empresa,localizacao)
```

### Resumindo colunas {.smaller}

-   Muitas vezes precisamos agrupar observações na nossa análise

-   Para isto podemos utilizar o verbo *group_by()*

-   Vamos agrupar as observações por *tipo de propriedade* e, depois, contar quantas são:

    ```{r, echo = TRUE}

    dados |>
      group_by(tipo_propriedade) |>
      count(tipo_propriedade)
    ```

### 

-   Outra forma de resumir colunas é utilizar a função *summarise( )* junto com a função *mutate( )*

-   Vamos calcular uma média da receita anual para os três tipos de propriedade

    ```{r, echo = TRUE}

    dados |>
      group_by(tipo_propriedade) |>
      summarise(
        n_propriedades = n(),
        media_receita = mean(receita_anual)
      )
    ```

-   O que pode ter acontecido?

-   Vamos perguntar à IA o que pode estar acontecendo de errado?

### 

```{r, echo = TRUE}

dados |>
  group_by(tipo_propriedade) |>
  summarise(
    n_propriedades = n(),
    media_receita = mean(receita_anual, na.rm = TRUE)
  )
```

### Modificando a ordem das colunas

```{r, echo = TRUE}

dados |>
  group_by(tipo_propriedade) |>
  summarise(
    n_propriedades = n(),
    media_receita = mean(receita_anual, na.rm = TRUE)) |>
  arrange(desc(media_receita))
```

### Avaliando a completude dos dados

```{r, echo = TRUE}

if(!require(skimr)) install.packages("skimr") 
library (skimr) 

n_missing(dados$receita_anual)

complete_rate(dados$receita_anual)

```

### Renomeando valores

-   Vamos supor, que após análise crítica, concluímos que valores ausentes na variável *recieta_anual* deveriam ser substituídos por zero

    ```{r, echo = TRUE}

    dados <- dados |>
      mutate(receita_anual = replace_na(receita_anual, replace = 0))
    ```

###  {.smaller}

-   Suponha que para construirmos uma tabela com informações da variável *presenca_internacional_fct* os labels longos estejam endo problemáticos

    ```{r, echo=TRUE}
    dados |>
      mutate(
        presenca_internacional_fct2 = case_when(
          presenca_internacional_fct == "Sem presença internacional" ~ "Não",
          presenca_internacional_fct == "Com presença internacional" ~ "Sim",
          is.na(presenca_internacional_fct) ~ "Ignorado",
          TRUE ~ NA_character_
        )
      ) |>
      relocate(nome_empresa, presenca_internacional_fct2) |> # Reordena as variáveis
      print(n=10)
    ```
